{"name":"PreMailer.Net","tagline":"C# .Net library, that moves your stylesheets to inline style attributes, for maximum compatibility with E-mail clients.","body":"# PreMailer.Net [![Build status](https://ci.appveyor.com/api/projects/status/30dh8owf89pxg9bt)](https://ci.appveyor.com/project/milkshakesoftware/premailer-net) [![Coverage Status](https://coveralls.io/repos/github/milkshakesoftware/PreMailer.Net/badge.svg?branch=master)](https://coveralls.io/github/milkshakesoftware/PreMailer.Net?branch=master)\r\n\r\nC# Library for moving CSS to inline style attributes, to gain maximum E-mail client compatibility.\r\n\r\n## Usage\r\n\r\n### Static method on `PreMailer` class\r\n```csharp\r\nstring htmlSource = File.ReadAllText(@\"C:\\Workspace\\testmail.html\");\r\n\r\nvar result = PreMailer.MoveCssInline(htmlSource);\r\n\r\nresult.Html \t\t// Resultant HTML, with CSS in-lined.\r\nresult.Warnings \t// string[] of any warnings that occurred during processing.\r\n```\r\n\r\n### Set up `PreMailer` instance\r\n```csharp\r\nstring htmlSource = File.ReadAllText(@\"C:\\Workspace\\testmail.html\");\r\n\r\nvar pm = new PreMailer(htmlSource);\r\npm.AddAnalyticsTags(source, medium, campaign, content, domain = null); // Optional to add analytics tags\r\n\r\nvar result = pm.MoveCssInline(...);\r\n\r\nresult.Html \t\t// Resultant HTML, with CSS in-lined.\r\nresult.Warnings \t// string[] of any warnings that occurred during processing.\r\n```\r\n\r\n### Options\r\nThe following options can be passed to the `PreMailer.MoveCssInline` method to configure it's behaviour:\r\n\r\n- `baseUri(Uri = null)` - Base URL to apply to `link` elements with `href` values ending with `.css`.\r\n- `removeStyleElements(bool = false)` - Removes elements that were used to source CSS (currently, only `style` is supported).\r\n- `ignoreElements(string = null)` - CSS selector of element(s) _not_ to inline. Useful for mobile styles (see below).\r\n- `css(string = null)` - A string containing a style-sheet for inlining.\r\n- `stripIdAndClassAttributes(bool = false)` - True to strip ID and class attributes.\r\n- `removeComments(bool = false)` - True to remove comments, false to leave them intact.\r\n\r\n### External style sheets\r\nSometimes it's handy to reference external style sheets with a `<link href=\"...\" />` element. PreMailer will download and use external style sheets as long as the value of `href` ends with `.css`.\r\n\r\nBoth absolute and relative URLs are suppored. If the URL is relative, you must specify the `baseUri` parameter in either the constructor, or when calling the static `MoveCssInline` method.\r\n\r\n`<link />` elements that match the `ignoreElements` selector won't be downloaded.\r\n\r\n### Media queries\r\nIf you want to [apply mobile styles to your e-mail](http://help.campaignmonitor.com/topic.aspx?t=164), you should put your\r\nmobile specific styles in its own `style` block that targets the appropriate devices using media queries.\r\n\r\nBut since you cannot know by the time of sending an e-mail wether or not it will be viewed on a mobile device, the `style`\r\nblock that targets mobile devices should not be inlined!\r\n\r\nTo ignore a `style` block, you need to specify an ignore selector when calling the `MoveCssInline` method, like this:\r\n\r\n```csharp\r\nvar result = PreMailer.MoveCssInline(input, false, ignoreElements: \"#ignore\");\r\n```\r\n\r\nAnd your mobile specific `style` block should have an ID of `ignore`:\r\n\r\n```html\r\n<style type=\"text/css\" id=\"ignore\">.target { width: 1337px; }</style>\r\n```\r\n\r\n### Premailer specific CSS becomes HTML attributes\r\nPremailer looks for the use of CSS attributes prefixed with `-premailer` and will proxy the value through to the DOM element as an attribute.\r\n\r\nFor example\r\n\r\n```css\r\ntable {\r\n    -premailer-cellspacing: 5;\r\n    -premailer-width: 500;\r\n}\r\n```\r\n\r\nwill make a `table` element render as\r\n\r\n```html\r\n<table cellspacing=\"5\" width=\"500\">\r\n```\r\n\r\n### Custom DOM Processing\r\n```csharp\r\nusing(var pm = new PreMailer(html)){\r\n\r\n  var document = pm.Document;\r\n\r\n  // use AngleSharp to process document before moving css inline ...\r\n\r\n  var result = pm.MoveCssInline();\r\n}\r\n```\r\n\r\n### Notes\r\n\r\n- Pseudo classes/elements which not supported by external dependencies, or doesn't make sense in email, will be ignored and logged to the `InlineResult.Warnings` collection.\r\n\r\n## Installation\r\n**NuGet**: [PreMailer.Net](http://nuget.org/List/Packages/PreMailer.Net)\r\n\r\n## Contributors\r\n\r\n* [martinnormark](https://github.com/martinnormark)\r\n* [robcthegeek](https://github.com/robcthegeek)\r\n\r\n[Among others](https://github.com/milkshakesoftware/PreMailer.Net/graphs/contributors)\r\n\r\n## License\r\n\r\nPreMailer.Net is available under the MIT license. See the [LICENSE](https://github.com/milkshakesoftware/PreMailer.Net/blob/master/LICENSE) file for more info.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}